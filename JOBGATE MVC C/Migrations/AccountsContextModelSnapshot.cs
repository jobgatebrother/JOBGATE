// <auto-generated />
using System;
using JOBGATE_MVC_C.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JOBGATE_MVC_C.Migrations
{
    [DbContext(typeof(AccountsContext))]
    partial class AccountsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JOBGATE_MVC_C.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.Cert_pize", b =>
                {
                    b.Property<string>("Cert_pize_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Position_level_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position_level_thai")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Cert_pize_Id");

                    b.ToTable("Cert_Pizes");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.CertificateEPY", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CertName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cert_CategoryCert_pize_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Issued_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Cert_CategoryCert_pize_Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("CertificateEPY");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.DegreeEPY", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DegreeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("GPAScore")
                        .HasColumnType("real");

                    b.Property<string>("MajorSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyCateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("StudyCateId");

                    b.ToTable("DegreeEPY");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.Degrees", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Degree_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Degree_Thai")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Degrees");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.DrivingEPY", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResumeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("drivinglicenseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.HasIndex("drivinglicenseId");

                    b.ToTable("DrivingEPY");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.DrivinglicenseEPY", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DrivinglicenseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DrivinglicenseEPY");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.EducationEPY", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DegreeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResumeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("ResumeId");

                    b.ToTable("EducationEPY");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.EmploymentEPY", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmploymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("resumeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentId");

                    b.HasIndex("resumeId");

                    b.ToTable("EmploymentEPY");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.EmploymentType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Employment_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Employment_Thai")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmploymentType");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.ForeignLanguage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ForeignLanguage_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForeignLanguage_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForeignLanguage_Thai")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Languagelevel_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Languagelevel_Thai")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ForeignLanguageEPY");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.Gender", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GenderName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.ImageFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("File_format")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("update_at")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("imageFiles");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.Industry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Industry_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industry_Thai")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Industry");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.JobExpEPY", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanylocationId")
                        .HasColumnType("int");

                    b.Property<string>("JobFieldId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Jobduty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResumeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<int>("Status_Working")
                        .HasColumnType("int");

                    b.Property<string>("WorkingDept")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Workingend")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Workingstart")
                        .HasColumnType("datetime2");

                    b.Property<string>("etcposition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("industryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("working_in_overseas")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanylocationId");

                    b.HasIndex("JobFieldId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("industryId");

                    b.ToTable("JobExpEPY");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.JobFieldEPY", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("JobField_Category_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobField_Category_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobField_Category_Thai")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobField_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobField_Thai")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobFieldEPY");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.LanguageMain", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ForeignLanguageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResumeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ForeignLanguageId");

                    b.HasIndex("ResumeId");

                    b.ToTable("LanguageMainEPY");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("District_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District_Thai")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postal_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province_Thai")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region_Thai")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tambon_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tambon_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tambon_Thai")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.MarriageStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MarriageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MarriageStatus");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.MembersInfoEPY", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("MarriageStatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MilitaryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("ReligionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ClientId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MarriageStatusId");

                    b.HasIndex("MilitaryId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ReligionId");

                    b.ToTable("MembersInfoEPY");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.Military", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MilitaryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Military");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contient_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Continent_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Continent_Thai")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country_Thai")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality_Thai")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nationality");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.PersonInfo.SkillsEPY", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("SkillEPY");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.PositionlevelEPY", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Positionlevel_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Positionlevel_Thai")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PositionlevelEPY");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.Religion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReligionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Religion");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.ResumeEPY", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpectedSalary")
                        .HasColumnType("int");

                    b.Property<string>("JobField2Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("JobfieldId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MemberRegisterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResumeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Show_open")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Update_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("locationId")
                        .HasColumnType("int");

                    b.Property<string>("resumeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("JobField2Id");

                    b.HasIndex("JobfieldId");

                    b.HasIndex("MemberRegisterId");

                    b.HasIndex("locationId");

                    b.HasIndex("resumeId");

                    b.ToTable("ResumeEPY");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.StudyCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudyCat_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyCat_Thai")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudyCategory");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.TrainingEPY", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndTraining")
                        .HasColumnType("datetime2");

                    b.Property<string>("Issued_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartTraining")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrainingName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("TrainingEPY");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.VehicleCatEPY", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleCatName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleCatEPY");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.VehicleEPY", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResumeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("vehicleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.HasIndex("vehicleId");

                    b.ToTable("VehicleEPY");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.CertificateEPY", b =>
                {
                    b.HasOne("JOBGATE_MVC_C.Models.Cert_pize", "Cert_Category")
                        .WithMany()
                        .HasForeignKey("Cert_CategoryCert_pize_Id");

                    b.HasOne("JOBGATE_MVC_C.Models.ResumeEPY", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.DegreeEPY", b =>
                {
                    b.HasOne("JOBGATE_MVC_C.Models.Degrees", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId");

                    b.HasOne("JOBGATE_MVC_C.Models.StudyCategory", "StudyCate")
                        .WithMany()
                        .HasForeignKey("StudyCateId");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.DrivingEPY", b =>
                {
                    b.HasOne("JOBGATE_MVC_C.Models.ResumeEPY", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId");

                    b.HasOne("JOBGATE_MVC_C.Models.DrivinglicenseEPY", "drivinglicense")
                        .WithMany()
                        .HasForeignKey("drivinglicenseId");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.EducationEPY", b =>
                {
                    b.HasOne("JOBGATE_MVC_C.Models.DegreeEPY", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId");

                    b.HasOne("JOBGATE_MVC_C.Models.ResumeEPY", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.EmploymentEPY", b =>
                {
                    b.HasOne("JOBGATE_MVC_C.Models.EmploymentType", "Employment")
                        .WithMany()
                        .HasForeignKey("EmploymentId");

                    b.HasOne("JOBGATE_MVC_C.Models.ResumeEPY", "resume")
                        .WithMany()
                        .HasForeignKey("resumeId");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.ImageFile", b =>
                {
                    b.HasOne("JOBGATE_MVC_C.Models.MembersInfoEPY", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.JobExpEPY", b =>
                {
                    b.HasOne("JOBGATE_MVC_C.Models.Location", "Companylocation")
                        .WithMany()
                        .HasForeignKey("CompanylocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JOBGATE_MVC_C.Models.JobFieldEPY", "JobField")
                        .WithMany()
                        .HasForeignKey("JobFieldId");

                    b.HasOne("JOBGATE_MVC_C.Models.PositionlevelEPY", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("JOBGATE_MVC_C.Models.ResumeEPY", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId");

                    b.HasOne("JOBGATE_MVC_C.Models.Industry", "industry")
                        .WithMany()
                        .HasForeignKey("industryId");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.LanguageMain", b =>
                {
                    b.HasOne("JOBGATE_MVC_C.Models.ForeignLanguage", "ForeignLanguage")
                        .WithMany()
                        .HasForeignKey("ForeignLanguageId");

                    b.HasOne("JOBGATE_MVC_C.Models.ResumeEPY", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.MembersInfoEPY", b =>
                {
                    b.HasOne("JOBGATE_MVC_C.Models.AppUser", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JOBGATE_MVC_C.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("JOBGATE_MVC_C.Models.Location", "location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JOBGATE_MVC_C.Models.MarriageStatus", "MarriageStatus")
                        .WithMany()
                        .HasForeignKey("MarriageStatusId");

                    b.HasOne("JOBGATE_MVC_C.Models.Military", "Military")
                        .WithMany()
                        .HasForeignKey("MilitaryId");

                    b.HasOne("JOBGATE_MVC_C.Models.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JOBGATE_MVC_C.Models.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.ResumeEPY", b =>
                {
                    b.HasOne("JOBGATE_MVC_C.Models.JobFieldEPY", "JobField2")
                        .WithMany()
                        .HasForeignKey("JobField2Id");

                    b.HasOne("JOBGATE_MVC_C.Models.JobFieldEPY", "Jobfield")
                        .WithMany()
                        .HasForeignKey("JobfieldId");

                    b.HasOne("JOBGATE_MVC_C.Models.AppUser", "MemberRegister")
                        .WithMany()
                        .HasForeignKey("MemberRegisterId");

                    b.HasOne("JOBGATE_MVC_C.Models.Location", "location")
                        .WithMany()
                        .HasForeignKey("locationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JOBGATE_MVC_C.Models.ResumeEPY", "resume")
                        .WithMany()
                        .HasForeignKey("resumeId");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.TrainingEPY", b =>
                {
                    b.HasOne("JOBGATE_MVC_C.Models.ResumeEPY", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId");
                });

            modelBuilder.Entity("JOBGATE_MVC_C.Models.VehicleEPY", b =>
                {
                    b.HasOne("JOBGATE_MVC_C.Models.ResumeEPY", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId");

                    b.HasOne("JOBGATE_MVC_C.Models.VehicleCatEPY", "vehicle")
                        .WithMany()
                        .HasForeignKey("vehicleId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JOBGATE_MVC_C.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JOBGATE_MVC_C.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JOBGATE_MVC_C.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JOBGATE_MVC_C.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
